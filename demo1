LCS_LENGTH(X,Y)
    m=X.length
    n=Y.length
    let b[1..m,1..,n]and c[1..m,0..n]be new tables
    for i=1 to m
        c[i,0]=0
    for i=1 to n
        c[0,j]=0
    for i=1 to m
        for j=1 to n
            if x[i]==Y[j]
                c[i,j]=c[i-1,j-1]+1
                b[i,j]=0
            elseif c[i-1,j]>=c[i,j-1]
                c[i,j]=c[i-1,j]
                b[i,j]=1
            else
                c[i,j]=c[i,j-1]
                b[i,j]=2
    return c and b


PRINT-LCS(b,X,i,j)
    if i==0 or j==0
        return
    if b[i,j]==0
        PRINT-LCS(b,X,i-1,j-1)
        print X[i]
    elseif b[i,j]==1
        PRINT-LCS(b,X,i-1,j)
    else
        PRINT-LCS(b,X,i,j-1)


REFACTORING-LCS(c,X,Y)
    i=X.length
    j=Y.length
    while i>0 and j=>0   //当i=0或者j=0时退出
        if c[i,j]==c[i-1,j-1]+1
            print X[i]
        elseif c[i-1,j]>=c[i,j-1]
            i=i-1
        else
            j=j-1

LONGEST-ICREASING-SUBSQUENCE(X)   //时间复杂度为O(n^2)
    n=X.length
    //c[i]用来记录以X[i]结尾的最长递增子序列长度,m[i]用来记录以X[i]结尾的前一个数的下标
    let c[1..n]，m[1..n]be new array
    c[1]=1,m[1]=0
    maxC=1
    for i=2 to n
        max=0
        for j=1 to i-1
            if X[j]<X[i]
                if c[j]>max
                    max=c[j]
                    m[i]=j
        c[i]=max+1
        if c[i]>maxC
            maxC=i
    return c,m and maxC

PRINT-LIS(X,c,m,maxC) //打印最长递增子序列
    if maxC<0
        return
    else
        PRINT-LIS(X,c,m,m[maxC])
        print X[maxC]


LONGEST-ICREASING-SUBSQUENCE(X)   //时间复杂度为O(nlgn)
    n=X.length
    length=0                          //LIS长度初始化为零
    let top[1 2..n,1 2]be a new table //创建n行两列的表
    for i=1 to n
        int temp =X[i]
        int left=0,right=length
        while left<right
            int mid=(left+right)/2
            if top[mid,2]<=temp
                right=mid
            else
                left=mid+1
        if left==length
            length=length+1
            top[i,1]=temp
        top[i,2]=temp    //top[i,2]存每一堆数中最大的那个，top[i,1]存一个最长增长子序列元素
    return top and length

PRINT-LIS(X,top,length) //打印最长递增子序列
    for i=1 to length
        print top[i,1]